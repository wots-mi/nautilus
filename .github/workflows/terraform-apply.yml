name: 'Terraform Apply (Dev)'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-apply.yml'

# Ensure only one workflow runs at a time to prevent state lock conflicts
concurrency:
  group: terraform-apply-dev
  cancel-in-progress: false

env:
  TERRAFORM_VERSION: '1.13.4'
  WORKING_DIRECTORY: './terraform'

jobs:
  terraform-apply:
    name: 'Terraform Apply (Dev Environment)'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: 'Azure Login with OIDC'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: 'Load Backend Config from tfvars'
        id: backend-config
        run: |
          STORAGE_ACCOUNT=$(grep backend_storage_account_name terraform.dev.tfvars | cut -d'"' -f2)
          CONTAINER_NAME=$(grep backend_container_name terraform.dev.tfvars | cut -d'"' -f2)
          echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "container_name=$CONTAINER_NAME" >> $GITHUB_OUTPUT
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: 'Terraform Init'
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ steps.backend-config.outputs.storage_account }}" \
            -backend-config="container_name=${{ steps.backend-config.outputs.container_name }}" \
            -backend-config="key=terraform.tfstate"
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: 'Terraform Validate'
        run: terraform validate
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: 'Terraform Plan'
        run: terraform plan -no-color -var-file="terraform.dev.tfvars"
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          TF_VAR_subscription_id_nautilus: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve -no-color -var-file="terraform.dev.tfvars"
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          TF_VAR_subscription_id_nautilus: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      # State is managed remotely in Azure Storage, no need to upload artifact
